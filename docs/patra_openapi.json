{
  "openapi": "3.0.3",
  "info": {
    "title": "Patra Knowledge Graph API",
    "version": "1.0.0",
    "description": "API for interacting with the Patra Knowledge Graph, providing comprehensive model card management, datasheet operations, and model deployment tracking capabilities.",
    "contact": {
      "name": "Patra KG Team",
      "url": "https://github.com/patra-kg"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5002",
      "description": "Development server"
    },
    {
      "url": "https://api.patra-kg.org",
      "description": "Production server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Home",
        "description": "Welcome endpoint for the Patra Knowledge Base",
        "operationId": "home",
        "tags": ["General"],
        "responses": {
          "200": {
            "description": "Welcome message",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Welcome to the Patra Knowledge Base"
                }
              }
            }
          }
        }
      }
    },
    "/modelcard": {
      "post": {
        "summary": "Upload model card",
        "description": "Uploads a new model card to the Patra Knowledge Graph",
        "operationId": "post_upload_model_card",
        "tags": ["Model Cards"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelCard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Model card successfully uploaded or already exists",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Successfully uploaded the model card"
                        },
                        "model_card_id": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Model card already exists"
                        },
                        "model_card_id": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/modelcard/{mc_id}": {
      "get": {
        "summary": "Get model card",
        "description": "Retrieves a model card by its ID",
        "operationId": "get_model_card",
        "tags": ["Model Cards"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model card",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model card successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelCard"
                }
              }
            }
          },
          "400": {
            "description": "Model card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "head": {
        "summary": "Get model card linkset",
        "description": "Returns an empty body with link information in the HTTP Link header",
        "operationId": "head_model_card",
        "tags": ["Model Cards"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model card",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Link headers contain the linkset information",
            "headers": {
              "Link": {
                "description": "Linkset relations for the model card",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Model card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update model card",
        "description": "Updates an existing model card in the Patra Knowledge Graph",
        "operationId": "put_update_model_card",
        "tags": ["Model Cards"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model card to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelCardUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Model card successfully updated or not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Successfully updated the model card"
                        },
                        "model_card_id": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Model card not found"
                        },
                        "model_card_id": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/datasheet": {
      "post": {
        "summary": "Upload datasheet",
        "description": "Uploads a new datasheet to the Patra Knowledge Graph",
        "operationId": "post_upload_datasheet",
        "tags": ["Datasheets"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Datasheet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Datasheet successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully uploaded the datasheet"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modelcards/search": {
      "get": {
        "summary": "Search model cards",
        "description": "Performs full-text search across all model cards in the knowledge graph",
        "operationId": "get_search_model_cards",
        "tags": ["Search"],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The search query string",
            "required": true,
            "schema": {
              "type": "string",
              "example": "transformer language model"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelCard"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Query parameter is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/modelcard/{mc_id}/download_url": {
      "get": {
        "summary": "Get model download URL",
        "description": "Retrieves the download URL for a given model ID",
        "operationId": "get_model_download_url",
        "tags": ["Models"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model download URL successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelLocation"
                }
              }
            }
          },
          "400": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/modelcards": {
      "get": {
        "summary": "List all model cards",
        "description": "Retrieves a comprehensive list of all model cards stored in the Patra Knowledge Graph",
        "operationId": "get_list_model_cards",
        "tags": ["Model Cards"],
        "responses": {
          "200": {
            "description": "List of model cards successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelCard"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modelcard/{mc_id}/deployments": {
      "get": {
        "summary": "Get model deployments",
        "description": "Retrieves all deployment information for a given model ID",
        "operationId": "get_model_deployments",
        "tags": ["Deployments"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model deployments successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Deployment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Deployments not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/modelcard/{mc_id}/location": {
      "put": {
        "summary": "Update model location",
        "description": "Updates the storage location information for a specific model",
        "operationId": "put_update_model_location",
        "tags": ["Models"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelLocationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Model location successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Model location updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid location data or missing payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/modelcard/id": {
      "post": {
        "summary": "Generate model ID",
        "description": "Generates a unique model ID for a given combination of author, name, and version",
        "operationId": "post_generate_model_id",
        "tags": ["Models"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelIdRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New model ID successfully generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pid": {
                      "type": "string",
                      "description": "Generated model ID"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Model ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pid": {
                      "type": "string",
                      "description": "Existing model ID"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - PID generation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/modelcard/{mc_id}/huggingface_credentials": {
      "get": {
        "summary": "Get Hugging Face credentials",
        "description": "Retrieves Hugging Face authentication credentials for a specific model",
        "operationId": "get_huggingface_credentials",
        "tags": ["Credentials"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model card",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hugging Face credentials successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HuggingFaceCredentials"
                }
              }
            }
          },
          "400": {
            "description": "Hugging Face credentials not set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/modelcard/{mc_id}/github_credentials": {
      "get": {
        "summary": "Get GitHub credentials",
        "description": "Retrieves GitHub authentication credentials for a specific model",
        "operationId": "get_github_credentials",
        "tags": ["Credentials"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model card",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GitHub credentials successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitHubCredentials"
                }
              }
            }
          },
          "400": {
            "description": "GitHub credentials not set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/modelcard/{mc_id}/linkset": {
      "get": {
        "summary": "Get model card linkset",
        "description": "Provides linkset relations for a model card in the HTTP Link header",
        "operationId": "get_model_card_linkset",
        "tags": ["Model Cards"],
        "parameters": [
          {
            "name": "mc_id",
            "in": "path",
            "description": "The unique identifier of the model card",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Link headers contain the linkset information",
            "headers": {
              "Link": {
                "description": "Linkset relations for the model card",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Model card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/device": {
      "post": {
        "summary": "Register device",
        "description": "Registers a new edge device for deployment tracking",
        "operationId": "post_register_device",
        "tags": ["Devices"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Device successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Device registered successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing device_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Device with this ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Failed to register device",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "summary": "Register user",
        "description": "Registers a new user for experiment tracking and model submissions",
        "operationId": "post_register_user",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing user_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - User with this ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Failed to register user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ModelCard": {
        "type": "object",
        "description": "A model card containing information about a machine learning model",
        "additionalProperties": true
      },
      "ModelCardUpdate": {
        "type": "object",
        "description": "Data for updating an existing model card",
        "additionalProperties": true
      },
      "Datasheet": {
        "type": "object",
        "description": "A datasheet containing information about a dataset",
        "additionalProperties": true
      },
      "ModelLocation": {
        "type": "object",
        "description": "Information about where a model is stored",
        "additionalProperties": true
      },
      "ModelLocationUpdate": {
        "type": "object",
        "required": ["location"],
        "properties": {
          "location": {
            "type": "string",
            "format": "uri",
            "description": "The new storage location URL for the model"
          }
        }
      },
      "ModelIdRequest": {
        "type": "object",
        "required": ["author", "name", "version"],
        "properties": {
          "author": {
            "type": "string",
            "description": "The author/creator of the model",
            "example": "OpenAI"
          },
          "name": {
            "type": "string",
            "description": "The name of the model",
            "example": "GPT-4"
          },
          "version": {
            "type": "string",
            "description": "The version of the model",
            "example": "1.0"
          }
        }
      },
      "Deployment": {
        "type": "object",
        "description": "Information about a model deployment",
        "additionalProperties": true
      },
      "HuggingFaceCredentials": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Hugging Face username"
          },
          "token": {
            "type": "string",
            "description": "Hugging Face access token"
          }
        }
      },
      "GitHubCredentials": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "GitHub username"
          },
          "token": {
            "type": "string",
            "description": "GitHub access token"
          }
        }
      },
      "Device": {
        "type": "object",
        "required": ["device_id"],
        "properties": {
          "device_id": {
            "type": "string",
            "description": "Unique identifier for the device"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for the device"
          },
          "type": {
            "type": "string",
            "description": "Type of device (e.g., 'edge', 'gateway', 'sensor')"
          },
          "location": {
            "type": "string",
            "description": "Physical location of the device"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of device capabilities"
          }
        }
      },
      "User": {
        "type": "object",
        "required": ["user_id"],
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "name": {
            "type": "string",
            "description": "Full name of the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user"
          },
          "organization": {
            "type": "string",
            "description": "Organization the user belongs to"
          },
          "role": {
            "type": "string",
            "description": "Role of the user in the system"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message describing what went wrong"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "General",
      "description": "General API endpoints"
    },
    {
      "name": "Model Cards",
      "description": "Operations for managing model cards in the knowledge graph"
    },
    {
      "name": "Models",
      "description": "Operations for managing model metadata and locations"
    },
    {
      "name": "Datasheets",
      "description": "Operations for managing dataset information"
    },
    {
      "name": "Deployments",
      "description": "Operations for managing model deployments"
    },
    {
      "name": "Search",
      "description": "Search operations across the knowledge graph"
    },
    {
      "name": "Credentials",
      "description": "Operations for retrieving authentication credentials"
    },
    {
      "name": "Devices",
      "description": "Operations for managing edge devices"
    },
    {
      "name": "Users",
      "description": "Operations for managing user accounts"
    }
  ]
}
