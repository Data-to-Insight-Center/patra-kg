from parser.json_mc_parser import parse_json_mc
from ingester.neo4j_ingester import MCIngester
import copy
import uuid
import random
import json
import time
from datetime import datetime, timedelta

def main():
    uri = "bolt://localhost:7689"
    user = "neo4j"
    password = "rootroot"

    mc_ingester = MCIngester(uri, user, password)

    model_card = parse_json_mc("../examples/model_cards/uci_cnn_mc.json")

    # publish deployment
    with open('../examples/deployments/deployment.json', 'r') as file:
        deployment = json.load(file)

    mc_ingest_total = 0
    mc_version_search = 0
    mc_version_ingest = 0
    iterations = 99


    for i in range(iterations):

        if i % 10 == 0:
            print("{}th iteration".format(i))

        model_id = str(uuid.uuid4())

        # generate model card
        new_mc = copy.deepcopy(model_card)
        new_mc['id'] = model_id
        new_mc['ai_model']['test_accuracy'] = random.uniform(0, 1)
        new_mc['bias_analysis']['demographic_parity_diff'] = random.uniform(-1, 1)
        new_mc['bias_analysis']['equal_odds_difference'] = random.uniform(-1, 1)


        # zeros_list = [0 for _ in range(300)]
        # random_embedding = [random.uniform(-0.05, 0.05) for _ in range(300)]

        # new_mc['v_embedding'] = [-0.020051574800163507,-0.04091186495497823,-0.02973022439982742,0.0951322556938976,0.059284972958266735,0.03346786485053599,-0.01470842375420034,-0.056635284796357155,0.06590576190501451,0.04427795438095927,-0.11613292619585991,-0.03498916607350111,0.016988271847367287,0.0869155889376998,0.0007453919388353825,0.08510360715445131,0.04570846585556865,-0.013783264206722379,-0.015155409928411245,-0.09223346691578627,-0.0646339412778616,0.014942360110580921,-0.008084106724709272,-0.014706134796142578,-0.07604141242336482,-0.00398559495806694,-0.07385463733226061,0.08465614262968302,-0.08610782586038113,0.031315994303440675,-0.037420654378365725,0.020300674601458013,-0.01711196918040514,-0.06917381286621094,-0.060760498046875,-0.007866763975471258,-0.026367951184511185,0.06891479436308146,0.03713645914103836,-0.032952308654785156,0.10392379807308316,0.002402114449068904,0.01627502404153347,-0.03864440927281976,-0.012445354834198952,-0.0650014877319336,-0.0661331657320261,0.0003917693975381553,-0.009710692800581455,0.05332756042480469,-0.10246047982946038,0.013153839390724897,-0.06946830754168332,-0.016043663024902344,0.0616069792304188,0.04473791131749749,-0.07015571650117636,-0.080718994140625,0.035372352227568626,-0.022837829776108265,0.006027984898537397,0.04417114285752177,-0.038866423070430756,-0.055758285510819405,0.03812637319788337,-0.0428665162762627,-0.010561371222138405,0.0738853458315134,0.02005345863290131,-0.043386554694734514,0.02435150113888085,-0.05715789832174778,0.05793657340109348,-0.04728393559344113,-0.06773529062047601,-0.04117637872695923,0.11182348756119609,0.0003631594590842724,-0.01893158000893891,0.060002136044204235,-0.005025482547353022,0.0008522033458575606,0.01824798621237278,-0.05823821993544698,0.05333099374547601,-0.012392043601721525,0.06535034161061049,0.10119934100657701,0.05202789348550141,-0.04196090716868639,0.00575866736471653,-0.12486763019114733,-0.03243331890553236,0.003349685575813055,-0.02671394357457757,0.05518398294225335,0.06794166564941406,-0.08306579594500363,0.09405136108398438,-0.02586154919117689,0.06677873060107231,-0.051203155890107155,0.004718017647974193,-0.04935874918010086,-0.006410598813090473,0.06426773071871139,-0.08220424689352512,0.0013183592818677425,-0.04341049201320857,0.001126098446547985,-0.061251831240952015,-0.02975006098859012,-0.029331207275390625,-0.04319038428366184,0.1330124856904149,-0.04454956064000726,-0.03000640869140625,-0.025586700532585382,0.12012987304478884,-0.03382263146340847,-0.06479968968778849,0.08082828519400209,-0.07204131968319416,-0.09209938067942858,0.05447235144674778,-0.021992492582739942,-0.14187011681497097,0.06882324209436774,-0.0377044679626124,-0.02307357790414244,-0.06069602945353836,-0.08260078402236104,-0.03539123572409153,-0.016239166259765625,-0.09873580862767994,-0.07476196344941854,-0.030270004470366985,-0.016949462704360485,-0.05130391148850322,0.12896118219941854,0.014634704450145364,0.030178832821547985,-0.06973190326243639,-0.0086822509765625,-0.0150474549154751,-0.01076507568359375,0.07239837665110826,0.007064247038215399,0.03344612120417878,0.028527832124382257,0.011121749645099044,-0.1007102970033884,-0.056500243954360485,0.12810707092285156,0.06725158728659153,-0.08530120772775263,-0.05580501537770033,-0.028367615304887295,-0.042927551083266735,-0.07822952279821038,0.006748390267603099,0.05655212397687137,0.0335376737639308,-0.04500846844166517,-0.044315338134765625,0.06926670111715794,0.06311664619715884,-0.004233169602230191,-0.09791946411132812,0.08384323120117188,-0.06599731370806694,-0.10198821942321956,-0.01922950753942132,-0.04119873046875,0.06264138221740723,0.038306426955386996,-0.0074371336959302425,-0.11780090257525444,0.00885314866900444,-0.004734229878522456,-0.08557090815156698,-0.04067363776266575,0.05337142967619002,0.03863906883634627,-0.035363769507966936,-0.02645111083984375,0.03247690154239535,0.0008138176053762436,0.07279376988299191,0.0016311649233102798,-0.036914062686264515,0.003925323369912803,-0.01414642296731472,-0.046274567022919655,-0.08340072631835938,-0.025764465448446572,0.06621704064309597,-0.07422905042767525,0.01848602294921875,-0.11705665662884712,-0.02997894212603569,0.03800773620605469,-0.053202819457510486,0.006791687337681651,-0.0810546875,0.05594482412561774,0.02574920654296875,-0.09152526874095201,0.027220534160733223,-0.01385803148150444,-0.07289123511873186,-0.022966003511101007,-0.02491626748815179,0.021451950073242188,-0.07756423950195312,0.06337566301226616,0.09093170124106109,0.053820228204131126,0.03331375075504184,-0.026904106052825227,-0.00664367713034153,0.028521728701889515,-0.038996887393295765,-0.10532302875071764,-0.055645751766860485,-0.02641754155047238,0.0570995332673192,0.0762115481775254,-0.004129028646275401,-0.02700576768256724,-0.01644897455116734,0.060207366943359375,0.0021392819471657276,-0.0023721695761196315,-0.029987240210175514,-0.018588924780488014,-0.027124023297801614,-0.10362586937844753,0.043362426571547985,-0.002483177464455366,0.06114845268893987,-0.026895141578279436,0.021832656871993095,-0.0664932249346748,-0.04523010253615212,0.014085388043895364,0.01736927032470703,0.15074081346392632,-0.015996170142898336,-0.05557861318811774,-0.011504745343700051,0.07070579548599198,-0.05427703820168972,0.00701594352722168,-0.008220291041652672,0.001125335693359375,-0.011037635849788785,-0.0942230224609375,0.029241943266242743,-0.04915351886302233,0.08747215234325267,0.011338043259456754,0.09485511761158705,0.00002727517858147621,-0.011608242988586426,0.05424041720107198,-0.016008377075195312,-0.07109374925494194,0.009603881975635886,-0.03115031705237925,-0.05671615619212389,0.12878932990133762,-0.02289352403022349,0.021025085356086493,0.05241594300605357,-0.0003005983307957649,-0.02337036095559597,0.052924919058568776,0.10257253609597683,-0.00517425499856472,-0.003369140438735485,0.06862964644096792,0.060498046688735485,-0.022212436655536294,0.01867999997921288,-0.08092956524342299,0.02846775110810995,-0.0004405979998409748,-0.003216552548110485,0.02964859048370272,0.05537490826100111,0.02649536170065403,0.02925720252096653,0.01979446434415877,0.058683776995167136,-0.07308330526575446,-0.030243682849686593,-0.08246765192598104,0.018410658929497004,-0.007304000813746825]
        # new_mc['v_embedding'] = random_embedding
        # new_mc['embedding'] = random_embedding

        # mc_ingest_start_time = time.time()
        mc_ingester.add_mc(new_mc)
        #
        # mc_ingest_total_time = time.time() - mc_ingest_start_time
        #
        # mc_ingest_total += mc_ingest_total_time
        # mc_version_search += version_search_total_time
        # mc_version_ingest += version_ingest_total_time
        #

        # model_id = "56e444a8-f566-4c31-ae7e-3bb0be7f7e6d"
        device_id = "jetson-nano-"
        # device_id = "raspberry-pi-3"
        for i in range(10):
            new_depl = copy.deepcopy(deployment)
            device_location = str(random.randint(1, 10))
            new_depl['id'] = str(uuid.uuid4())
            new_depl['model_id'] = model_id + "-model"
            new_depl['device_id'] = device_id + device_location
            new_depl['deployment_location'] = "sf-zone-" + device_location
            new_depl['mean_accuracy'] = random.uniform(0, 1)
            new_depl['power_consumption_peak_watts'] = random.uniform(0, 40)
            new_depl['requests_served'] = random.uniform(0, 10000)

            start_time = datetime(2024, 2, 8)
            end_time = start_time + timedelta(hours=random.randint(0, 24))

            new_depl['start_time'] = start_time
            new_depl['end_time'] = end_time

            mc_ingester.add_deployment(new_depl)

    # print("MC ingest total time: {}".format(mc_ingest_total/iterations))
    # print("MC version search time: {}".format(mc_version_search/iterations))
    # print("MC version ingest time: {}".format(mc_version_ingest/iterations))

if __name__ == "__main__":
    main()